import type { BadgePreset, Sponsor, Sponsorship } from './types'
import type { SponsorkitConfig } from '.'

export function genSvgImage(x: number, y: number, size: number, url: string) {
  return `<image x="${x}" y="${y}" width="${size}" height="${size}" xlink:href="${url}"/>`
}

export function generateBadge(
  x: number,
  y: number,
  sponsor: Sponsor,
  { size, displayName: showName, textColor = '#333333', nameLength = 12, classes = 'sponsors-avatar' }: BadgePreset,
) {
  const { login, avatarUrl } = sponsor
  let name = (sponsor.name || sponsor.login).trim()
  const url = sponsor.linkUrl || `https://github.com/${sponsor.login}`
  if (name.length > nameLength) {
    if (name.includes(' '))
      name = name.split(' ')[0]
    else
      name = `${name.slice(0, nameLength - 3)}...`
  }

  return `
<a xlink:href="${url}" class="${classes}" target="_blank" id="${login}">
  ${showName ? `<text x="${x + size / 2}" y="${y + size + 18}" text-anchor="middle" class="name" fill="${textColor}">${name}</text>` : ''}
  ${genSvgImage(x, y, size, avatarUrl)}
</a>`.trim()
}

export class SvgComposer {
  height = 0
  body = ''

  constructor(public readonly config: Required<SponsorkitConfig>) {}

  addSpan(height = 0) {
    this.height += height
    return this
  }

  addTitle(text: string) {
    this.body += `<text x="${this.config.width / 2}" y="${this.height}" text-anchor="middle" class="sponsor-name">${text}</text>`
    this.height += 20
    return this
  }

  addLine(sponsors: Sponsorship[], config: BadgePreset) {
    const offsetX = (this.config.width - sponsors.length * config.boxWidth) / 2 + (config.boxWidth - config.size) / 2
    this.body += sponsors
      .map((s, i) => {
        const x = offsetX + config.boxWidth * i
        const y = this.height
        return generateBadge(x, y, s.sponsor, config)
      })
      .join('\n')
    this.height += config.boxHeight
  }

  addSponsorGrid(sponsors: Sponsorship[], preset: BadgePreset) {
    const perLine = Math.floor((this.config.width - preset.sidePadding * 2) / preset.boxWidth)

    new Array(Math.ceil(sponsors.length / perLine))
      .fill(0)
      .forEach((_, i) => {
        this.addLine(sponsors.slice(i * perLine, (i + 1) * perLine), preset)
      })

    return this
  }

  generateSvg() {
    return `
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="${this.config.width}" height="${this.height}">
<!-- Generated by https://github.com/antfu/sponsorskit -->
<style>${this.config.svgInlineCSS}</style>
${this.body}
</svg>
`
  }
}
